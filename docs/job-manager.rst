Job Manager
===========

The *job manager* is a service that sits between the *middleware* and the
*backend*, and it is customized for a particular combination of simulator,
compute infrastructure, and cloud storage infrastructure.


The following API endpoints are provided, which are called by the
middleware::

	POST /job/<job_id>/start

	payload = {"fields_to_patch": [
			{
			"name" : <field_name>,
			"value": <val>
			},
			...
		],
		"scripts" : [
		        {
			"name" : <script_name>,
			"location" : <script_location>
			},
			...
		]
	}

	return = {"data": <message>,
	          "status": <status_code>
	}

Start a new job with id *<job_id>*.

-----

::

        GET /job/<job_id>/output

	return = [
	    {"job_id": <job_id>,
	     "output_type": <file_extension>,
	     "destination_path": <URL>
	    },
	    ...
	]

When a job is finished, a call to this endpoint will yield the URLs needed
to access the job outputs.  In many cases, these will include temporary
access tokens generated by the job manager.

------

The job manager is also responsible for notifying the middleware of various,
occurences, via the following API calls:

::

      PUT  request to <middleware_url>/job/<job_id>/status
      payload = {"status": <job_status>}

where the job_status must be one of "QUEUED", "RUNNING", "FINALIZING",
"COMPLETED" or "FAILED".


::

      POST request to <middleware_url>/job/<job_id>/output
      payload = {"job_id": <job_id>,
                 "output_type": <output_type>,
		 "destination_path": <URL>
		 }

This API call is made as soon as the job manager is aware that the job has
successfully completed, in order to notify the middleware that the outputs
are available.  If some sort of temporary access token is needed to access the
data, it will generally NOT be appended to the destination_path URL here -
instead, the middleware will make a GET request to the ``output`` endpoint of
the job-manager, at which point the job-manager will obtain the token.


Openfoam job-manager
====================

At present, the only fully-implemented job-manager is for the **Openfoam**
simulator, running on a machine that can be *ssh*-ed to, and storing the
output on Azure blob storage.

The service is written in Python 3, and uses the *Flask* framework.  Calls
to the middleware API are made using the *requests* package.  Communication
with the machine (or Docker container) running the **Openfoam** simulator
is via ssh.

The following API endpoints on the job manager are called by the backend:



Starting a job
--------------

When the job start endpoint is hit, the job-manager performs the following
steps:
 * Retrieve the scripts from the specified location (on Azure blob storage
   in the currently implemented demo).
 * Patch the "fields_to_patch" parameters in the scripts with the specified
   values, using **Mako**.
 * Copy the scripts to the backend over ssh.
 * For scripts with specified "actions", execute those actions on the backend.
   The primary example for this is the "RUN" action, which will trigger the
   job-manager to run that script on the backend, in order to launch the job.



Retrieving output
-----------------

When the job output endpoint is hit, the job-manager will use the Azure
credentials stored in ``config.json`` to generate a
*Shared Access Signature* (SAS) token.
