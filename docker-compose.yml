version: '3'
services:

  # frontend components
  frontend:
    build:
      context: frontend
      dockerfile: Dockerfile.development
    ports:
    - "8080:8080"
    depends_on:
    - manager
    - middleware
    - simulator
    networks:
    - share
    volumes:
    - './frontend/src:/app/src'
    - '/app/node_modules'

  # auth components
  auth:
    build:
      context: auth
      dockerfile: Dockerfile
    ports:
     - "5050:5050"
    volumes:
      - ./auth:/app
    depends_on:
      - auth_database
    networks:
      - share
  auth_database:
    image: "postgres:latest"
    volumes:
     - auth_volume:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=sg
      - POSTGRES_PASSWORD=sg
      - POSTGRES_DB=sg
    networks:
     - share

  # middleware components
  middleware:
    build:
      context: middleware
      dockerfile: Dockerfile
    ports:
     - "5000:5000"
    volumes:
     - ./middleware:/app
    depends_on:
     - middleware_database
    networks:
     - share
    command: gunicorn -w 1 -b :5000 app:app --reload
  middleware_database:
    image: "postgres:latest"
    volumes:
     - middleware_volume:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=sg
      - POSTGRES_PASSWORD=sg
      - POSTGRES_DB=sg
    networks:
     - share

  # openfoam components
  manager:
    build:
      context: openfoam/manager
      dockerfile: Dockerfile
    ports:
      - "5010:5010"
      - "10023:22"
    volumes:
      - ./openfoam/manager:/app
    environment:
      - FLASK_CONFIGURATION=development
      - STORAGE_ACCOUNT_NAME
      - STORAGE_ACCOUNT_KEY
    depends_on:
    - middleware
    - simulator
    networks:
    - share
    command: gunicorn -w 1 -b :5010 app:app --reload
  simulator:
    build:
      context: openfoam/simulator
      dockerfile: Dockerfile
    # here we use the keys from the manager
    env_file:
    - openfoam/manager/keys/simulator.env
    ports:
    - "10022:22"
    privileged: true
    volumes:
    - ./openfoam/simulator:/app
    networks:
    - share

networks:
  share:
    driver: bridge
volumes:
  auth_volume:
  middleware_volume:
